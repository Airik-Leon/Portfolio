
@{
    ViewBag.Title = "BreakerBall";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div style="width: 98%;height:50px; margin:0px auto; margin-top:10px; border-radius:5px ;color:#fba81d; background-color: #0e2842" >
    <label style="margin: 0 auto;margin-top:10px">BreakerBall</label>
</div>
<div style="margin: 0px auto; text-align:center; width: 480px; height: 320px; margin-bottom:20px;">
    <canvas id="breakerCanvas" width="480" height="320" style="border:solid 5px #0094ff; border-radius:10px"></canvas>
</div>

<script>
    var canvas = document.getElementById("breakerCanvas")
    var ctx = canvas.getContext("2d");

    var brickRowCount = 3;
    var brickColumnCount = 5;
    var brickWidth = 75;
    var brickHeight = 20;
    var brickPadding = 10;
    var brickOffsetTop = 30;
    var brickOffsetLeft = 30;

    var bricks = [];
    for (c = 0; c < brickColumnCount; c++) {
        bricks[c] = [];
        for (r = 0; r < brickRowCount; r++) {
            bricks[c][r] = { x: 0, y: 0 , status: 1};
        }
    }
    var score = 0;
    var lives = 3;
        var rightPressed = false;
        var leftPressed = false;
        var x = canvas.width / 2;
        var y = canvas.height - 30;
        var dx = 5;
        var dy = -5;
        var ballRadius = 10;
        var paddleHeight = 10;
        var paddleWidth = 75;
        var paddleX = (canvas.width - paddleWidth) / 2;

        document.addEventListener("keydown", keyDownHandler, false);
        document.addEventListener("keyup", keyUpHandler, false);
        document.addEventListener("mousemove", mouseMoveHandler, false);

        function keyDownHandler(e) {
            if (e.keyCode == 39) {
                rightPressed = true;
            }
            else if (e.keyCode == 37) {
                leftPressed = true;
            }
        }
        function keyUpHandler(e) {
            if (e.keyCode == 39) {
                rightPressed = false;
            }
            else if (e.keyCode == 37) {
                leftPressed = false;
            }
        }
        function mouseMoveHandler(e) {
            var relativeX = e.clientX - canvas.offsetLeft;
            if (relativeX > 0 && relativeX < canvas.width) {
                paddleX = relativeX - paddleWidth / 2;
            }
        }
        function drawBall() {
            ctx.beginPath();
            ctx.arc(x, y, ballRadius, 0, Math.PI * 2);
            ctx.fillStyle = "#000000"
            ctx.fill();
            ctx.closePath();
        }
        function drawPaddle() {
            ctx.beginPath();
            ctx.rect(paddleX, canvas.height -paddleHeight, paddleWidth, paddleHeight);
            ctx.fillStyle = "#0095DD";
            ctx.fill(0);
            ctx.closePath();
        }
        function drawBricks() {
            for (c = 0; c < brickColumnCount; c++) {
                for (r = 0; r < brickRowCount; r++) {
                    if (bricks[c][r].status == 1) {
                        var brickX = (c * (brickWidth + brickPadding)) + brickOffsetLeft;
                        var brickY = (r * (brickHeight + brickPadding)) + brickOffsetTop;
                        bricks[c][r].x = brickX;
                        bricks[c][r].y = brickY;
                        ctx.beginPath();
                        ctx.rect(brickX, brickY, brickWidth, brickHeight);
                        ctx.fillStyle = "#10d7de"
                        ctx.fill();
                        ctx.closePath();
                    }
                }
            }
        }
        function drawLives() {
            ctx.font = "16pt Arial";
            ctx.fillStyle = "#db300d";
            ctx.fillText("Lives: " + lives, canvas.width - 90, 20);
        }
        function collisionDetection() {
            for (c = 0; c < brickColumnCount; c++) {
                for (r = 0; r < brickRowCount; r++) {
                    var b = bricks[c][r];
                    if(b.status ==1){
                        if (x > b.x && x < b.x + brickWidth && y > b.y && y < b.y + brickHeight) {
                            dy = -dy;
                            b.status = 0;
                            score++;
                            if (score == brickRowCount * brickColumnCount) {
                                alert("YOU WIN, CONGRATULATIONS!");
                                document.location.reload();
                            }
                        }
                    }
                }
            }
        }
        function drawScore() {
            ctx.font = "16pt Arial";
            ctx.fillStyle = "#78db0d";
            ctx.fillText("Score: " + score, 8, 20)
        }
            function draw() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                drawBall();
                drawPaddle();
                drawBricks();
                collisionDetection();
                drawScore();
                drawLives();

                if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) {
                    dx = -dx;

                }
                if (y + dy < ballRadius) {
                    dy = -dy;
                }
                else if (y + dy > canvas.height - ballRadius) {
                    if (x > paddleX && x < paddleX + paddleWidth) {
                        dy = -dy;
                    }
                    else {
                        lives--;
                        if (!lives) {
                            alert("GAME OVER");
                            document.location.reload();
                        }
                        else {
                            x = canvas.width / 2;
                            y = canvas.height - 30;
                            dx = 5;
                            dy = -5;
                            paddleX = (canvas.width - paddleWidth) /2;
                        }
                    }
                }
                //-------------------------------
                if (rightPressed && paddleX < canvas.width - paddleWidth) {
                    paddleX += 7;
                }
                else if (leftPressed && paddleX > 0) {
                    paddleX -= 7;
                }
                x += dx;
                y += dy;
                requestAnimationFrame(draw);
            }
            draw()

</script>
